CODE      	SEGMENT      

STACK_FOR_INTERRUPT	DW 100H DUP (?)     

		ASSUME CS:CODE, DS:DATA, SS:STACK_PROGRAM


OUTPUT_AL 	PROC 
;¬€¬Œƒ —»Ã¬ŒÀ¿ »« AL
		PUSH 	AX
		PUSH 	BX
		PUSH 	CX
		MOV 	AH, 09H
		MOV 	BH, 0
		MOV 	CX, 1
		INT 	10H
		POP 	CX
		POP 	BX
		POP 	AX
		RET

OUTPUT_AL 	ENDP


OUTPUT_AL2 	PROC 
;¬€¬Œƒ ƒ¬”’ —»Ã¬ŒÀŒ¬ »« AL
		PUSH 	AX
		PUSH 	BX
		PUSH 	CX
		MOV 	AH, 09H
		MOV 	BH, 0
		MOV 	CX, 2
		INT 	10H
		POP 	CX
		POP 	BX
		POP 	AX
		RET

OUTPUT_AL2 	ENDP

GET_CURS  	PROC
;œŒÀ”◊≈Õ»≈ œŒ«»÷»»  ”–—Œ–¿
		PUSH 	AX
		PUSH 	BX
		MOV 	AH, 03H
		MOV 	BH, 0H
		INT 	10H
		POP 	BX
		POP 	AX
		RET

GET_CURS  	ENDP

SET_CURS  	PROC
;”—“¿ÕŒ¬ ¿  ”–—Œ–¿
		PUSH 	AX
		PUSH 	BX
		MOV 	AH, 02H
		MOV 	BH, 0H
		INT 	10H
		POP		BX
		POP 	AX
		RET

SET_CURS  	ENDP


KEEP_CS					DW ?
KEEP_IP					DW ?
SIGNATURE 				DW 01234H
ADRESS_REMOVE			DW ?

INTERRUPT 	PROC	FAR            
;œ–Œ÷≈ƒ”–¿ — œ–≈–€¬¿Õ»≈Ã

		JMP START
		AX_SAVE		DW ?
		SS_SAVE		DW ?
		SP_SAVE 	DW ?
		
		START:
		MOV		AX_SAVE, AX
		MOV		SS_SAVE, SS
		MOV		SP_SAVE, SP
		MOV 	AX, CS
		MOV 	SS, AX 
		MOV 	SP, OFFSET STACK_FOR_INTERRUPT + 200
		MOV 	AX, AX_SAVE
		PUSH 	AX
		PUSH 	BX
		PUSH 	CX
		PUSH 	DX
		PUSH 	ES
		 
		CALL	GET_CURS
		MOV		CX, DX
		PUSH	AX
		PUSH	CX
		MOV 	AL, NUM
		MOV		BL, 0AH
		MOV		DH, 18H
		MOV		DL, 4FH
		
		LOOP_:
		MOV		AH, 0H
		DIV		BL
		CALL	SET_CURS
		MOV		CL, AL
		MOV		AL, AH
		ADD		AL, 30H
		CALL	OUTPUT_AL
		DEC		DL
		MOV		AL, CL
		CMP		AL, 0H
		JNE		LOOP_	
		INC		NUM	
		CMP		NUM, 63H
		JNE		RET_CURSOR
		MOV		NUM, 0H
		MOV		AL, 20H
		CALL	OUTPUT_AL2

		RET_CURSOR:
		POP		CX
		POP		AX
		MOV 	DX, CX
		CALL 	SET_CURS

		MOV 	AL, 20H
		OUT 	20H, AL
		POP		ES
		POP 	DX
		POP 	CX
		POP 	BX
		POP 	AX
		MOV 	AX, SS_SAVE
		MOV 	SS, AX
		MOV 	AX, AX_SAVE
 		MOV 	SP, SP_SAVE
		IRET     

INTERRUPT 	ENDP
INTERRUPT_END:

INTERRUPT_HANDLER_REPLACEMENT PROC NEAR
;«¿Ã≈Õ¿ Œ¡–¿¡Œ“◊» ¿ œ–≈–€¬¿Õ»ﬂ

		MOV 	AL, 1CH
		MOV 	AH, 35H
		INT		21H
		MOV 	WORD PTR KEEP_IP, BX
		MOV 	WORD PTR KEEP_CS, ES
		PUSH 	DS
		MOV 	DX, OFFSET INTERRUPT
		MOV 	AX, SEG INTERRUPT
		MOV 	DS, AX
		MOV 	AL, 1CH
		MOV 	AH, 25H
		INT 	21H
		POP		DS
		RET

INTERRUPT_HANDLER_REPLACEMENT ENDP

LOAD_RESIDENT PROC NEAR
;«¿√–”« ¿ –≈«»ƒ≈Õ“¿

		MOV 	DX, OFFSET LOAD_RESIDENT_STR
		PUSH	AX
       		MOV		AH, 09H
       	 	INT		21H
		POP 	AX
		MOV		DX, OFFSET INTERRUPT_END
		ADD 	DX, 10FH
       	MOV 	CL, 4H
		SHR 	DX, CL
		INC		DX
		MOV 	AH, 31H
		INT 	21H  
		RET

LOAD_RESIDENT ENDP

REMOVE_RESIDENT PROC NEAR
;”ƒ¿À≈Õ»≈ –≈«»ƒ≈Õ“¿ »« œ¿Ãﬂ“»

		MOV 	DX, OFFSET REMOVE_RESIDENT_STR
		PUSH	AX
       		MOV		AH, 09H
        	INT		21H
		POP 	AX	
		MOV 	AL, 1CH
		MOV 	AH, 35H
		INT  	21H
		MOV 	DX, WORD PTR ES:KEEP_IP
		MOV 	AX, WORD PTR ES:KEEP_CS
		MOV 	WORD PTR KEEP_IP, DX
		MOV 	WORD PTR KEEP_CS, AX
		CLI
		PUSH 	DX
		MOV 	DX, WORD PTR KEEP_IP
		MOV 	AX, WORD PTR KEEP_CS
		MOV  	DS, AX
		MOV  	AH, 25H
		MOV  	AL, 1CH
		INT  	21H
		POP		DS
		STI
		RET

REMOVE_RESIDENT ENDP

FREE_MEMORY PROC NEAR
;Œ—¬Œ¡Œ∆ƒ≈Õ»≈ œ¿Ãﬂ“»

		MOV 	ES, ES:ADRESS_REMOVE
		MOV 	AH, 49H
		INT 	21H
		MOV 	ES, ES:[2CH]	
		MOV 	AH, 49H
		INT 	21H
		RET

FREE_MEMORY ENDP


Main:           

		MOV 	AX, DATA		  
		MOV 	DS, AX
		MOV 	AX, ES
		MOV 	ADRESS_REMOVE, AX	
 		
		MOV 	AH, 35H
		MOV 	AL, 1CH
		INT		21H
		MOV		DX, ES:[BX-4]
		CMP 	DX, SIGNATURE
		JE 		REMOVE_FROM_MEMORY

		CALL INTERRUPT_HANDLER_REPLACEMENT
		CALL LOAD_RESIDENT
		JMP	PROGRAM_END

		REMOVE_FROM_MEMORY:
		MOV	AX, ADRESS_REMOVE 
		MOV	ES, AX
		CMP	BYTE PTR ES:[82H], '/'
		JNE	IN_MEMORY
		CMP	BYTE PTR ES:[83H], 'u'
		JNE	IN_MEMORY 
		CMP	BYTE PTR ES:[84H], 'n'
		JNE	IN_MEMORY 
		JMP REMOVE_INTERRUPTED
		
		IN_MEMORY:
		MOV 	DX, OFFSET IN_MEMORY_STR
		PUSH	AX
       		MOV		AH, 09H
        	INT		21H
		POP 	AX
		JMP 	PROGRAM_END 

		REMOVE_INTERRUPTED:
		CALL REMOVE_RESIDENT
		CALL FREE_MEMORY
		
		
		PROGRAM_END:
		MOV 	AH, 4CH
		INT 	21H
	
CODE      	ENDS 

DATA		SEGMENT

LOAD_RESIDENT_STR 		DB "Resident has been load in memory!", 13, 10, "$"
IN_MEMORY_STR 			DB "Resident still in memory!", 13, 10, "$"
REMOVE_RESIDENT_STR 	DB "Resident has been removed!", 13, 10, "$"
NUM					DB 0


DATA      	ENDS 

STACK_PROGRAM	SEGMENT	STACK           

DW 		100H DUP(?)

STACK_PROGRAM   	ENDS  

			END	Main
