CODE      	SEGMENT      

STACK_FOR_INTERRUPT	DW 100H DUP (?)     

		ASSUME CS:CODE, DS:DATA, SS:STACK_PROGRAM


ADDRESS 				DD 	?
SIGNATURA 				DW 01234H
ADRESS_REMOVE			DW ?

INTERRUPT 	PROC	FAR            

		JMP 		START
		AX_SAVE		DW ?
		SS_SAVE		DW ?
		SP_SAVE		DW ?
		SYMBOL 		DB ? 
		
		START:
		MOV	AX_SAVE, AX
		MOV	SS_SAVE, SS
		MOV	SP_SAVE, SP
		MOV 		 AX, CS
		MOV 		 SS, AX 
		MOV 		 SP, OFFSET STACK_FOR_INTERRUPT + 200H
		MOV 		 AX, AX_SAVE
		PUSH 		 AX
		PUSH 		 BX
		PUSH 		 CX
		PUSH 		 DX
		PUSH 		 ES

		IN 		AL, 60H
		CMP 	AL, 0BH
		JE 		REPLACE_NUM_0_1
		CMP		AL, 02H
		JE		REPLACE_NUM_0_1
		CMP	AL, 1FH
		JE		REPLACE_S
		
			

		PUSHF
		CALL 	DWORD PTR CS:ADDRESS
		JMP 	FINISH 
	

		REPLACE_NUM_0_1:
		MOV	SYMBOL, 78H
		JMP	FOR_INTERRUPT

		REPLACE_S:
		MOV	SYMBOL, 63H
		JMP	FOR_INTERRUPT

		
		FOR_INTERRUPT:
		IN 		AL, 61h   
		MOV 	AH, AL    
		OR 		AL, 80H    
		OUT 	61H, AL  
		XCHG 	AH, AL    
		OUT 	61H, AL    
		MOV 	AL, 20H     
		OUT 	20H, AL     
		
		WRITE_IN_BUF:
		MOV 	AH, 05H
		MOV 	CL, SYMBOL
		MOV 	CH, 00H
		INT 	16H
		OR 		AL, AL
		JZ 		FINISH
		JMP SKIP 
		

		SKIP:
		MOV 	AX, 0040H
		MOV 	ES, AX
		MOV 	AX, ES:[1AH]
		MOV 	ES:[09H], AX
		JMP 	WRITE_IN_BUF
	

		FINISH:
		MOV 	AL, 20H
		OUT 	20H, AL
		POP	ES
		POP 	DX
		POP 	CX
		POP 	BX
		POP 	AX
		MOV 	AX, SS_SAVE
		MOV 	SS, AX
		MOV 	AX, AX_SAVE
 		MOV 	SP, SP_SAVE
		IRET     

INTERRUPT 	ENDP
INTERRUPT_END:

PRINT  	PROC	NEAR

       	PUSH	AX
       	MOV		AH, 09H
        INT		21H
		POP 	AX 
        RET

PRINT  	ENDP

INTERRUPT_HANDLER_REPLACEMENT PROC NEAR

		MOV 	AL, 09H
		MOV 	AH, 35H
		INT		21H
		MOV 	WORD PTR ADDRESS, BX
		MOV 	WORD PTR ADDRESS+2, ES
		PUSH 	DS
		MOV 	DX, OFFSET INTERRUPT
		MOV 	AX, SEG INTERRUPT
		MOV 	DS, AX
		MOV 	AL, 09H
		MOV 	AH, 25H
		INT 	21H
		POP		DS
		RET

INTERRUPT_HANDLER_REPLACEMENT ENDP

LOAD_RESIDENT PROC NEAR

		MOV 	DX, OFFSET LOAD_RESIDENT_STR
		CALL 	PRINT
		MOV		DX, OFFSET INTERRUPT_END
		ADD 	DX, 10FH
       	MOV 	CL, 4H
		SHR 	DX, CL
		INC		DX
		MOV 	AH, 31H
		INT 	21H  
		RET

LOAD_RESIDENT ENDP

REMOVE_RESIDENT PROC NEAR

		MOV 	DX, OFFSET REMOVE_RESIDENT_STR
		CALL 	PRINT	
		MOV 	AL, 09H
		MOV 	AH, 35H
		INT  	21H
		MOV 	DX, WORD PTR ES:ADDRESS
		MOV 	AX, WORD PTR ES:ADDRESS+2
		MOV 	WORD PTR ADDRESS, DX
		MOV 	WORD PTR ADDRESS+2, AX
		CLI
		PUSH 	DX
		MOV 	DX, WORD PTR ADDRESS
		MOV 	AX, WORD PTR ADDRESS+2
		MOV  	DS, AX
		MOV  	AH, 25H
		MOV  	AL, 09H
		INT  	21H
		POP		DS
		STI
		RET

REMOVE_RESIDENT ENDP

FREE_MEMORY PROC NEAR

		MOV 	ES, ES:ADRESS_REMOVE
		MOV 	AH, 49H
		INT 	21H
		MOV 	ES, ES:[2CH]	
		MOV 	AH, 49H
		INT 	21H
		RET

FREE_MEMORY ENDP


Main:           

		MOV 	AX, DATA		  
		MOV 	DS, AX
		MOV 	AX, ES
		MOV 	ADRESS_REMOVE, AX	
 		
		MOV 	AH, 35H
		MOV 	AL, 09H
		INT		21H
		MOV		DX, ES:[BX-4]
		CMP 	DX, SIGNATURA
		JE 		REMOVE_FROM_MEMORY

		CALL INTERRUPT_HANDLER_REPLACEMENT
		CALL LOAD_RESIDENT
		JMP	PROGRAM_END

		REMOVE_FROM_MEMORY:
		MOV	AX, ADRESS_REMOVE 
		MOV	ES, AX
		CMP	BYTE PTR ES:[82H], '/'
		JNE	IN_MEMORY
		CMP	BYTE PTR ES:[83H], 'u'
		JNE	IN_MEMORY 
		CMP	BYTE PTR ES:[84H], 'n'
		JNE	IN_MEMORY 
		JMP REMOVE_INTERRUPTED
		
		IN_MEMORY:
		MOV 	DX, OFFSET IN_MEMORY_STR
		CALL 	PRINT
		JMP 	PROGRAM_END 

		REMOVE_INTERRUPTED:
		CALL REMOVE_RESIDENT
		CALL FREE_MEMORY
		
		
		PROGRAM_END:
		MOV 	AH, 4CH
		INT 	21H
	
CODE      	ENDS 

DATA		SEGMENT

LOAD_RESIDENT_STR 		DB "Resident has been load!", 13, 10, "$"
IN_MEMORY_STR 			DB "Resident still in memory!", 13, 10, "$"
REMOVE_RESIDENT_STR 	DB "Resident has been removed!", 13, 10, "$"


DATA      	ENDS 

STACK_PROGRAM	SEGMENT	STACK           

DW 		100H DUP(?)

STACK_PROGRAM   	ENDS  

			END	Main
